(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{64:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return o})),t.d(n,"metadata",(function(){return u})),t.d(n,"rightToc",(function(){return l})),t.d(n,"default",(function(){return c}));var r=t(2),i=t(6),a=(t(0),t(74)),o={id:"amm",title:"AMM"},u={unversionedId:"amm",id:"amm",isDocsHomePage:!1,title:"AMM",description:"`solidity",source:"@site/docs\\amm.md",slug:"/amm",permalink:"/docs/docs/amm",editUrl:"https://github.com/SynFutures/docs/edit/master/docs/docs/amm.md",version:"current",sidebar:"someSidebar",previous:{title:"Futures",permalink:"/docs/docs/futures"}},l=[],s={rightToc:l};function c(e){var n=e.components,t=Object(i.a)(e,["components"]);return Object(a.b)("wrapper",Object(r.a)({},s,t,{components:n,mdxType:"MDXLayout"}),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-solidity"}),'// SPDX-License-Identifier: GPL\npragma solidity ^0.7.0; \npragma experimental ABIEncoderV2; // to enable structure-type parameter\n\nimport "../library/LibTypes.sol";\nimport "./IFutures.sol";\nimport "./IGlobalConfig.sol";\nimport "./IOracle.sol";\n\ninterface IAmm {\n    // LP share token ERC20 interface\n\n    event Transfer(address indexed from, address indexed to, uint value);\n    event Approval(address indexed owner, address indexed spender, uint value);\n\n    function name() external view returns (string memory);\n    function symbol() external view returns (string memory);\n    function decimals() external view returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address account) external view returns (uint);\n    function transfer(address recipient, uint amount) external returns (bool);\n    function allowance(address owner, address spender) external view returns (uint);\n    function approve(address spender, uint amount) external returns (bool);\n    function transferFrom(address sender, address recipient, uint amount) external returns (bool);\n    function increaseAllowance(address spender, uint addedValue) external returns (bool);\n    function decreaseAllowance(address spender, uint subtractedValue) external returns (bool);\n\n    // IAmm interface\n\n    event UpdateMarkPriceState(Types.MarkPriceState markPriceState);\n    event EnterEmergencyStatus(uint price);\n    event EnterSettlingStatus(uint blockTime);\n    event EnterSettledStatus(uint price);\n\n    // initialization function to help ammProxy\'s construction, called only once\n    function initialize (\n        string memory _shareTokenName, address _config, address _futuresProxy, address _oracle, uint256 _alignedExpiry\n    ) external;\n\n    // return global config\n    function config() external view returns (IGlobalConfig);\n    // return futures\n    function futuresProxy() external view returns (IFutures);\n    // return expiry timestamp\n    function expiry() external view returns (uint);\n    // return oracle\n    function oracle() external view returns (IOracle);\n    // return mark price state from last update\n    function markPriceState() external view returns (Types.MarkPriceState memory);\n    // return current AMM status\n    function status() external view returns (Types.Status);\n    // return settlement price\n    function settlementPrice() external view returns (uint);\n\n    // begin emergency status\n    function beginEmergency(uint price) external; // onlyOwner\n    // end emergency status\n    function endEmergency() external; // onlyOwner\n\n    // return the latest index price from oracle\n    function indexPrice() external view returns (uint price);\n    // return AMM account information\n    function tradingAccount() external view returns (Types.Account memory);\n\n    // return the latest mark price state using onchain data\n    function currentMarkPriceState() external view returns (Types.MarkPriceState memory);\n    // return the latest mark price using onchain data\n    function currentMarkPrice() external view returns (uint);\n    // return mark price from previous update\n    function lastMarkPrice() external view returns (uint);\n\n    // return buy price based on trade size\n    function getBuyPrice(uint size) external view returns (uint) ;\n    // return sell price based on trade size\n    function getSellPrice(uint size) external view returns (uint);\n\n    // update AMM state, including status and mark price state\n    function update() external; // onlyNormalOrSettling\n    // trade with AMM given direction, size in base asset, limit price and deadline\n    function trade(bool buy, uint size, uint limitPrice, uint deadline) external returns (bool); // onlyNormalOrSettling\n\n    // deposit margin and initialize the pool given the margin token amount in 10^18,\n    // initial price, leverage for hedging position for LP and deadline\n    function depositAndInitPool(\n        uint wadAmount, uint initPrice, uint leverage, uint deadline\n    ) external payable returns (uint);\n    // deposit margin and add liquidity to pool given the margin token amount in 10^18,\n    // leverage for hedging position for LP and deadline\n    function depositAndAddLiquidity(\n        uint wadAmount, uint leverage, uint deadline\n    ) external payable returns (bool, uint); // onlyNormalOrSettling\n    // add liquidity to pool using existing margin from LP\'s account given margin token amount in 10^18 and deadline\n    function addLiquidity(uint wadAmount, uint deadline) external returns (bool, uint); // onlyNormal\n    // remove liquidity from pool to margin and transfer LP\'s account\n    function removeLiquidity(uint shareAmount, uint deadline) external returns (bool, uint); // onlyNormalOrSettling\n    // settle LP\'s pool share to margin and transfer to LP\'s account\n    function settleShare() external; // onlySettled\n\n    // fully liquidate account by taking over position and provide additional margin\n    function liquidate(address trader, uint deadline) external; // onlyNormalOrSettling\n    // partially liquidate account by force the account to trade with AMM to reduce position\n    function liquidateByAmm(address trader, uint deadline) external returns (uint); // onlyNormalOrSettling\n}\n\n')))}c.isMDXComponent=!0},74:function(e,n,t){"use strict";t.d(n,"a",(function(){return d})),t.d(n,"b",(function(){return f}));var r=t(0),i=t.n(r);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function u(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=i.a.createContext({}),c=function(e){var n=i.a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):u(u({},n),e)),t},d=function(e){var n=c(e.components);return i.a.createElement(s.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return i.a.createElement(i.a.Fragment,{},n)}},p=i.a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,o=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),d=c(t),p=r,f=d["".concat(o,".").concat(p)]||d[p]||m[p]||a;return t?i.a.createElement(f,u(u({ref:n},s),{},{components:t})):i.a.createElement(f,u({ref:n},s))}));function f(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,o=new Array(a);o[0]=p;var u={};for(var l in n)hasOwnProperty.call(n,l)&&(u[l]=n[l]);u.originalType=e,u.mdxType="string"==typeof e?e:r,o[1]=u;for(var s=2;s<a;s++)o[s]=t[s];return i.a.createElement.apply(null,o)}return i.a.createElement.apply(null,t)}p.displayName="MDXCreateElement"}}]);